{"pages":[{"url":"http://lele1122.github.io/Me.html","text":"Welcome to +OK! My name is Jiahao (Joe), a fresh graduate from National University of Singapore. This is a blog to share what I know and what I think during my daily life. If you want to know more about me, feel free to contact with me: plusok516@gmail.com","tags":"About","title":"About"},{"url":"http://lele1122.github.io/reading-notes-jianshi-1-zh_CN.html","text":"序 从《浪潮之巅》起看到现在，《见识》是第三本我所完整阅读过的吴军老师的书。有其他几本我是看了一部分后来因为没有连续看下去而中断的。吴军老师所作的这些书虽然都比较好读，但道理却很深，值得反复思考。 从幸福看人生 《见识》本书一开篇就提到了关于逆袭的观点。很多人都想着有一天能从一个底层阶级跨越到顶层阶级，这其实是非常不容易的。社会是分层的，而好一点的社会只是让不同层级的人有机会上下流动。同时因为层级的不同，低层级的可能得付出80%的努力才能收获上一层及20%努力带来的成果，而每个层级的人其实都在努力着向前爬，并不能因为自己努力了就一定期望着可以往上升。 虽说上升困难，但我们至少要努力保证不往下走，说不定一不小心就上升了不少呢？ 细化人生方面，永远躲不过去的是关于婚姻。在这方面，作者分别给男生和女生提了不同建议。 家庭 曾有人告诉作者\"聪明人会欣赏聪明人，而且只有聪明人才会欣赏聪明人\"。这句话其实是对男生找对象的最简单的一句话。至今依旧有很多男生舍本逐末，去追逐漂亮但不聪明的女生，到了最后发现两个人生活上各种摩擦。如果是个聪明人，很多问题都可以轻松解决。这句话其实也是告诉女生，不要想着肤白貌美就能找到白马王子，如果不努力提高自己素养，就不要说为什么找不到好男生了。 对于女生，则不要总想着找个老实本分的男生。男生只有对你好与不好，没有老实不老实的。而看这个人是否会对自己好，撇开那些花言巧语，要看他的\"婚姻观\"。婚后大家小家的关系中，双方都该明白关系的亲密度和重要性依次是\"夫妻优于子女，更优先于双方的父母\"。如果一个男生试着去解释家里人比你更重要，还列出各种理由的时候，趁着说\"再见\"吧。因为他也会有借口之后把你给牺牲掉。 对于父母，作者提到要\"先让父母成熟起来\"。 现在很多父母依旧通过自己片面的经验去指导孩子的生活，而教育中最可怕的事情就是用上一辈的思想教育这一辈的人如何去迎接20年后的未来。但也有些经验确实如此，可这样也就一定要过度干预么？我的想法是趁着年轻，早点翻跟头，也就有时间早点爬起。否则到了年纪大了，犯同样错误可能再也爬不起来。最后一点是父母不要去干涉孩子的婚姻。首先他们这一辈婚恋观非常简单，到今天可能已经没多少价值；其次很多给孩子不断出主意的父母本身的婚姻就不成功，却还要不断\"出谋划策\"，就更显得可笑了。虽然没有去研究统计，但因为父母掺和导致孩子婚姻破裂的事例就已经屡见不鲜了。 作者提到不少做父母该达到的点，在这写下给父母及未来的自己以指导： 父母成熟，首先自己要不断地进步。父母是孩子最好的老师，孩子的观察和学习能力非常强，父母身上哪怕有一点点的坏习惯，孩子很容易就能学会。 今天，中国依然有很多父母把孩子看成是自己的私产，不论多大都说孩子应该挺自己的话、孝顺自己。这种认识其实还停留在农耕文明时代。 首先，在我家，我和我妻子是主人，他们都是客人，没有发言权。当然，到了他们家，他们便是主人，我们没有发言权。 年轻人应该把自己的看成是一个成年人，用一种尊敬，而且是成年人之间的沟通方式和长辈说话，要不断将自己接受的新思维方式和理念传递给父母。 孩子在某种程度上是放大了的自己，要想让他们有出息，父母们先要成熟起来；要想让孩子将来成为精英，自己要先成为精英的父母。 最后关于一生，作者提到向死而生。太多人过于关注最后的结果而错过了途中的美景。 绝大多数人都过分看重最后的一两周，而忽视前面的几十年。 少做选择，关注重点，少做事情（懂得放弃） 以下是一些摘抄: 印度人缺乏选择的状态，以及不选择而产生的幸福感和成就感，帮助了他们的精英在公司里取得成功。 很多时候，我们把太多的经历花在了选择上，而不是经营上，导致难以精进。或许少些原则，会更加聚焦，也会让我们更加幸福、更成功。 人生不仅要做人，也要作诗。中国人从来不缺乏会做人的人，尤其是在当下的时代，因此仅仅会做人是难以脱颖而出的，如果还会作诗，便容易鹤立鸡群了。 当一个人的心思放在捡芝麻上，他就永远失去了捡西瓜的可能性。 \"...如果你想通了很多事情不做其实也无关大体，就不要去做它们，这样你就不会天天忙忙碌碌了。\"如果一个人能够把一件事情做好，他首先想到的就是应该少做事情，而不是让自己更加忙碌。 人有一个弱点，就是见到小便宜想去占，很多利益舍不得放弃。 幸福来源 对于幸福生活的来源，作者提出了三个具体维度： 爱情和婚姻 对未来的期望 生活的态度 在追求幸福的过程中，很多人不知不觉忘记了初始目的，而这一点却正是我们每次都应该回看思考的： 幸福生活才是根本，其他都不过是达成这个目的的手段而已。 谈谈见识（难喝的鸡汤） 这里的难喝，可以用两种解释。一种是味道难喝，另一种是难以去喝。有多难喝？那就是很多观点都和以往鸡汤不太相同。好在这些观点近几年在朋友圈中也开始慢慢发酵，只希望不要达到另一个极端。 人生是一场长跑，很多人一开始关注于起跑线，但冲刺过后没有长久的后劲维持的话，迟早会在人流中败下阵来。而同时，运气在这场长跑中也很重要，你可能错失一次两次的机会，但人生充满各种可能与机会。 人在运气不好的时候，最需要的不是盲目的努力，而是慢下来思考，有耐心地做事情。 \"时间是你的朋友，而时机不是。\"也就是说，耐心是成功的第一要素。 我们所能做的，就是\"尽人事、听天命\"。 但同时活得诸事不顺的人，基本都有三个共同的问题： 缺乏见识 缺乏爱 缺乏规矩 缺乏见识的人要少来和他们来往，因为道理讲不通，土费口舌；缺乏爱的人难以大气，做不成大事；而比贫穷更可怕的缺乏规矩，轻则没人愿意帮助他们，重则大家与其作对。 如果要增长自己的见识，阅读是必不可少的。但我们也要避免最后沉浸于阅读，却忘记思考。 我们今天又很多获取知识和咨询的渠道，但是它们不能帮助我们审视人生，因为它们不是给我们带来闲暇，而是让我们更加没有闲暇来思考。 \"Study as if you were to live forever, live as if you were to die tomorrow.\" 朋友是我们一生的财富 关于这里，讲的更多的是作者从不同\"朋友\"中获得的道理。我就简单列出几点： 职场 每周，你最好把自己的工作总结成三句话，周一早上汇报给你的老板；每半年到一年，你要有一个让他惊喜的成果。 公司 首先认同公司最终死掉这件事是常态，在这个前提下，再去考虑如何传承公司的基因和文化，而不是试图维持一个不死的公司。 投资 第一，不要做自己不懂的事情；第二，永远不要做空股票；第三，永远不要用杠杆投资。 人一生不要两次富有。 少犯错误比多几次成功更重要。 教育 故善者因只，其次利道之，其次教诲之，其次整齐之，最下者与之争。——《史记·货殖列传》 销售 世界上所有的人都喜欢买东西，而不是被买东西，因此那种求人的营销¥一定无法成功。 我们有时在讲，创造出一个市场，其实就是让潜在的消费者认可一种过去他没有意识到的价值。","tags":"Reading","title":"人的一生"},{"url":"http://lele1122.github.io/new-year-plan-2018-life-zh_CN.html","text":"2017年底回顾 让我先面对残酷的年底回顾。一年过去了，作为当时的一个计划，与之一起的Blog竟停止更新了一年😅。再一次打开它竟然是为了写2018新年计划，似乎有点讽刺。就让我来看看到底完成了多少目标，做了多少改变。 博客 上一次更新是2016年，哎。 读书 大概读了20本，比去年还少，甚至略少于计划中的26本。有几本都读到一半然后有种不知道该放弃还是继续的。而且这类书又偏偏特别长，比如《堂吉诃德》，《失控》。而且越来越多地依赖podcast获取一些信息而导致读书量在下半年有所减少。下半年频繁地出行活动以及开了《海贼王》的坑也是一个原因。 课程 断断续续不知道学了些什么，现在还在学的是Andrew Ng的 Machine Learning 了。而且自从巴厘岛旅游回来后就开始各种作业延误。好多之前买的学习类书籍基本没打开过。 健身 一直有坚持，顺便还增加了不少打网球和羽毛球的次数。还有过不少的游泳。因为旅行潜水，算是一直有保持运动。 编程 工作时完成一个Python的小程序，不过还有很多值得优化的地方，还需努力。 旅行 去了两次刁曼岛，菲律宾的薄荷岛，老挝走过了一周，东北玩了一大圈，巴厘岛溜达了一下。 吉他 不知不觉已经暂停很久了，也不知道什么时候会重拾起来。 摄影 抽出了点时间整理照片，但是对于修图，几乎没碰过。而且对于摄影的学习也止步于一开始拍照的新鲜劲。 聚会 算是组织了几次10-30人的活动，还主讲了《思考，快与慢》，都还算成功。 这么看来，自己大概只完成了目标的一半吧，并不是很理想。而且上个月打开看才发现自己早已不记得当初竟然定了这些目标。看样子每个季度回顾一样去年给自己定下的新年目标是很有必要的。 人生固定计划 这是第二次写新年计划，写的时候感觉每年很多事情其实都是固定的目标，应该不断维持。再仔细一想，其实每年更多的是应该确定一个新目标并维持之前的良好习惯。 但是同时也要给自己列入更多的细节，比如学什么课程，这一年读哪些书（书单），同时不会排得太慢给自己一些中途缓冲的余地。比如有什么更好看的书或者朋友推荐的，即时性的书籍需要阅读。 虽然这个时代变化越来越快，但是可能依旧需要一个长远的五年，七年或者十年计划。这种计划看着很遥远，但对于忙碌着突然悠闲下来无所适从的自己来说，是一个清晰既定目标。而且定期审视自己的目标来发现自己过去可能荒谬的想法也是件有趣的事。 给自己一个早睡早起的目标，每天记录这一天入睡和起床时间。 所以总结就是希望保持一辈子做以下这些事： 读书（至少两周一本） 健身（至少2次一周） 出门和朋友吃饭聊天聚会（至少一个月一次） 旅行（当前至少每年四次不包括回家） 2018新年计划 工作&学业 这一年应该对未来工作或者学业做一点计划。暂时想来是看能否在当前工作上做出点突破，得到些更多的挑战。不知不觉都已经工作了两年但是如果这么一直做下去而没任何变化迟早有一天会发现自己高不成低不就。高不能得到更优秀挑战的事情来做，低不能让自己因为始终无法突破而有勇气从零开始尝试一些更有发展未来的工作。其中想过要进大学进一步深造，正好有朋友推荐 Master of Technology in Knowledge Engineering ，也有朋友就要读完parttime了。我看了下课程也是最近比较感兴趣的内容，下一个intake开始日期是 1 February 2017 ，我要准备在5月中之前完成申请以及初步了解预习内容为考试做准备。如果上半年没有出现太大的工作变动以至于我觉得未来不太可能太有时间完成学业的话，这就是计划之中的学习计划了。 对于 Master of Technology in Knowledge Engineering 作以下timeline： 2月中出发斯里兰卡前阅读完基本介绍以及各种要求，了解一下 申请规则 ， 考试类型 ， 课程内容 ， 学费减免 等必要信息。 3月开始尝试在线寻找类似课程学习并作申请填报。 除了这个，1月得完成最近一直在学的 Machine Learning 。到了2月对python的网页爬虫和SQL作进一步的学习达到能基本会爬一个网站。如果还有多余时间之后希望结合Machine Learning做一些简单的分析。不过这些计划可能会基于对于未来工作的需求做出变动。具体得在1月中前大致浏览未来工作的需求以及基于个人兴趣进行选择，但总体会和数据分析相关。这也正好去验证是否之后的读书计划和未来工作需求相吻合。 JavaScript也是一直只知道皮毛的状态，而到现在买的一本算法书和JS书都还没开始看，所以待会儿要把这些书计入今年 读书列表 中。尤其是最近了解到 JXA 后更觉得JavaScript可以多方便帮助我去做一些automation。 之前一直有闲时间来练琴，但渐渐地发现自己并不是真能一直可以闲下来坚持练习。虽然还是可以偶尔无聊弹一下，但要做的事情很多，渐渐明白一个人的时间终究有限，有些东西得暂时放手。这个还是等其他对自己\b更重要的事情完成后再考虑吧。 运动 去年主要依赖于公司健身房以及教练的知道进行运动，但这始终是种被动锻炼，而且很多时候并不真正理解这个运动的好处。所以适当的去看些关于健身的书籍，以及对健身做一个个人在家的规划也是很有必要的。 网球学习会继续下去，这还是个挺让人开心的运动。 理财 之前一直说要理财，但是真正开始进入理财竟然是2017年数字货币的疯狂导致的。其实很多时候最大的阻碍是开始，或者说是转变——transition。每个人都习惯在自己的熟悉的状态下呆着，要从这种舒适区走出来就像冬天起床一样困难。但是一旦踏入搞定一开始的繁琐后，你就会觉得之前自己怎么那么矫情。理财其实一开始最麻烦的是开户，理财的知识技巧只是会影响一个人的盈利与亏损，对开始做这件事没有太大的影响。我就在基本不懂的情况下开始，然后自然而然你会因为想要盈利而被推动着去学习相关金融知识。 新的一年先学习点基本规则和看懂K线图，财报，计划根据知乎或者朋友的推荐去看一些书，有些已经列入之后的 读书列表 中。 读书列表（未完） 日期 学习 小说 人生哲学 其他 1月 《日本蜡烛图教程》《手把手教你读财报》》 《月亮与六便士》 《我们仨》 《一平米健身：硬派健身》 2月 《编程珠玑》 《制度是如何形成的》 张爱玲 《旅行的艺术》《活出生命的意义》 《腾讯传》 3月 《利用Python进行数据分析》 《查泰莱夫人的情人》 《苏菲的世界》 4月 《文明之光》 《倾城之恋》 《皇帝新脑》 5月 《JavaScript语言精粹》 《刀锋》 《The Art of Travel》 6月 《游戏改变世界》 《金锁记》 《Vagabonding》 《囚徒健身》《体适能基础理论》 7月 《激情》 《禅与摩托车维修艺术》 《枪炮、病菌与钢铁》 8月 《万物简史》 《历史的巨镜》 9月 《轴心时代》 10月 11月 12月 《Poor Charlie's Almanack》 《灵山》 《狱中书简》 旅游计划 （未完） 斯里兰卡 2月10-18日 吴哥窟 上海 诗巴丹潜水 菲律宾潜水","tags":"Life","title":"新年计划"},{"url":"http://lele1122.github.io/new-year-plan-2017-en_US.html","text":"Year 2016 is coming to the end. It is time to review what I have done in the last half year (actually seven months). The following is the plan I made in the end of May: Blog: at least write 1 per month, ideally 1 per week Book: at least read 2 per month, ideally 1 per week Courses: at least finish 2 basic language learning (python and javascript), ideally 1 advanced level. LaTeX must be at advanced level. Running: at least 5km per week, ideally 50km per month Workout: at least 2 times per week, ideally 4 times per week Gathering: at least 1 per month, ideally 2 per month Here is the result I got for the last seven months: Blog: including this one, 7 articles Book: 22 Courses: three Lynda Python courses finished; one codecademy JavaScript course finished; LaTeX does not improve much Running: canceled Workout: around twice per week Gathering: around 7 The result seems not so bad but not good enough. In the coming new year, I should continue and do more. Here is other new targets I set: Guitar: practise at least half an hour per day, ideally one hour per day Coding: create at least 2 useful programs with Python or JavaScript, ideally 4 Traveling: at least four places outside Singapore, ideally six Photography: learn how to use Lightroom to Intermediate level Good Luck and have fun!","tags":"life","title":"New Year Plan"},{"url":"http://lele1122.github.io/windows-management-tools-en_US.html","text":"Divvy Divvy is a good window management tool with Modal Key like cmd + ` , c for centerring screen. However it is not cheap with only windows management function. Window Tidy Window Tidy is a tool I bought when it was limited free. When you drag the window, it will give you options for different layout. But I like use shortcuts more and it does not support Modal Key. Slate I finally choose Slate because it is open source and it is much more powerful than others. If you like using shortcuts and frustrated by the limited shortcuts, this could be a good choice. Here is the config I used: config defaultToCurrentScreen true config nudgePercentOf screenSize config resizePercentOf screenSize # Resize Bindings bind right :cmd , ` resize + 10 % + 0 bind left :cmd , ` resize -10 % + 0 bind up :cmd , ` resize + 0 -10 % bind down :cmd , ` resize + 0 + 10 % # bind right :ctrl ; alt resize -10 % + 0 bottom-right # bind left :ctrl ; alt resize + 10 % + 0 bottom-right # bind up :ctrl ; alt resize + 0 + 10 % bottom-right # bind down :ctrl ; alt resize + 0 -10 % bottom-right bind f :cmd , ` move screenOriginX ; screenOriginY screenSizeX ; screenSizeY bind c :cmd , ` move screenOriginX + screenSizeX / 6 ; screenOriginY + screenSizeY / 6 4 * screenSizeX / 6 ; 4 * screenSizeY / 6 # Push Bindings bind d :cmd , ` push right bar-resize :screenSizeX / 2 bind a :cmd , ` push left bar-resize :screenSizeX / 2 bind w :cmd , ` push up bar-resize :screenSizeY / 2 bind s :cmd , ` push down bar-resize :screenSizeY / 2 # Nudge Bindings # bind right :shift ; alt nudge + 10 % + 0 # bind left :shift ; alt nudge -10 % + 0 # bind up :shift ; alt nudge + 0 -10 % # bind down :shift ; alt nudge + 0 + 10 % # Throw Bindings bind 1 :cmd , ` throw 0 resize bind 2 :cmd , ` throw 1 resize bind 3 :cmd , ` throw 2 resize bind right :ctrl ; alt ; cmd throw right resize bind left :ctrl ; alt ; cmd throw left resize bind up :ctrl ; alt ; cmd throw up resize bind down :ctrl ; alt ; cmd throw down resize # Focus Bindings # bind right :cmd focus right # bind left :cmd focus left # bind up :cmd focus up # bind down :cmd focus down # bind up :cmd ; alt focus behind # bind down :cmd ; alt focus behind # Window Hints bind esc :cmd hint bind ` :cmd , ` grid padding :5 1680x1050 :16 , 9 1050x1680 :9 , 16 1920x1200 :16 , 10 1440x900 :16:9 Karabiner - A Keyboard Tool Karabiner is a powerful and stable keyboard customizer for OS X. I like my Cherry 3494 but sometimes I need the Mac function keys like volume up and down. This could be a good choice. It can maps those f1-f12 keys to the Mac function keys. Here is the private.xml from Zhihu : command interchange with option ， win changes to command menu change to fn f1-f3 control brightness f2 mission control f4 launchpad f5-f6 keyboard backlight f7-f9 media control f10-f12 volume control PrintScreen change to Eject NumLock change to Command+Delete <?xml version=\"1.0\"?> <root> <devicevendordef> <vendorname> CHERRY_KEYBORD </vendorname> <vendorid> 0x046a </vendorid> </devicevendordef> <deviceproductdef> <productname> PC_KEYBOARD </productname> <productid> 0x0011 </productid> </deviceproductdef> <item> <name> CHERRY G80-3000 KEYBOARD </name> <identifier> private.deviceproductdef </identifier> <device_only> DeviceVendor::CHERRY_KEYBORD, DeviceProduct::PC_KEYBOARD </device_only> <identifier> private.remap.pc_to_mac </identifier> <autogen> __KeyToKey__ KeyCode::PC_APPLICATION, KeyCode::FN </autogen> <autogen> __KeyToKey__ KeyCode::COMMAND_L, KeyCode::OPTION_L </autogen> <autogen> __KeyToKey__ KeyCode::COMMAND_R, KeyCode::OPTION_R </autogen> <autogen> __KeyToKey__ KeyCode::OPTION_L, KeyCode::COMMAND_L </autogen> <autogen> __KeyToKey__ KeyCode::OPTION_R, KeyCode::COMMAND_R </autogen> <autogen> __KeyToKey__ KeyCode::F1, ConsumerKeyCode::BRIGHTNESS_DOWN </autogen> <autogen> __KeyToKey__ KeyCode::F2, ConsumerKeyCode::BRIGHTNESS_UP </autogen> <autogen> __KeyToKey__ KeyCode::F3, KeyCode::EXPOSE_ALL </autogen> <autogen> __KeyToKey__ KeyCode::F4, KeyCode::DASHBOARD </autogen> <autogen> __KeyToKey__ KeyCode::F7, ConsumerKeyCode::MUSIC_PREV </autogen> <autogen> __KeyToKey__ KeyCode::F8, ConsumerKeyCode::MUSIC_PLAY </autogen> <autogen> __KeyToKey__ KeyCode::F9, ConsumerKeyCode::MUSIC_NEXT </autogen> <autogen> __KeyToKey__ KeyCode::F10, ConsumerKeyCode::VOLUME_MUTE </autogen> <autogen> __KeyToKey__ KeyCode::F11, ConsumerKeyCode::VOLUME_DOWN </autogen> <autogen> __KeyToKey__ KeyCode::F12, ConsumerKeyCode::VOLUME_UP </autogen> <autogen> __KeyToKey__ KeyCode::KEYPAD_CLEAR, KeyCode::DELETE, ModifierFlag::COMMAND_L </autogen> <autogen> __KeyToKey__ KeyCode::PC_PRINTSCREEN, ConsumerKeyCode::EJECT </autogen> </item> </root>","tags":"Coding","title":"Window Management Tools"},{"url":"http://lele1122.github.io/wanwanmeixiangdao-zh_CN.html","text":"蒙洛迪诺说，人做判断的时候有两种机制:一种是\"科学家机制\"，先有证据再下结论;一种是\"律师机制\"，先有了结论再去找证据。世界上科学家很少，你猜绝大多数人使用什么机制思考?每个人都爱看能印证自己已有观念的东西。我们不但不爱看，而且还会直接忽略，那些不符合我们已有观念的证据。 这个毛病叫做\"确认偏误\"(confirmation bias)。如果你已经开始相信一个东西了，那么你就会主动 寻找能够增强这种相信的信息，乃至不顾事实。 诺贝尔奖得主罗伯特·奥曼(Robert Aumann)在1976年发表了一篇论文Agreeing to Disagree[1]，这篇 论文堪称是传世之作，它指出，如果是两个理性而真诚的真理追求者争论问题，争论的结果必然是两人 达成一致。换句话说如果争论不欢而散，那么其中必然有一方是虚伪的。 If two people have the same priors, and their posteriors for an event A are common knowledge, then these posteriors are equal. 我们的本能工作得如此之好，以至于我们在明明没有规律的地方也能找出规律来。人脑很擅长理解规律，但是很不擅长理解随机性。发现规律任何时候都可以帮助我们更好地生存下去，而理解随机性却是只在现代社会才有意义的一个技能。 意志力是一种有限的资源，你用在这里就没法用在那里。 如果一个人在工作中用到很多意志力，回家以后就很难再用。双职工夫妇很容易为了小事吵架，因为他们懒得控制自己的情绪。反过来说，如果让他们早点下班，虽然在一起的时间增加了，但是却会更少发生争吵。 如此。在作者的另一个实验中，研究人员偶然发现如果在实验过程中给受试者喝一点含糖的饮料，比如 果汁，他们的意志力就会被增加。而且必须用真正的糖，甜味替代品没用。据此，研究者推断:人的意 志力能量来自血液中的葡萄糖。 一个有意思的发现是:做选择会消耗意志力。 We are all agreed that your theory is crazy. The question that divides us is whether it is crazy enough to have a chance of being correct 每个人的时间都一样多，因此时间不是金钱。时间是围棋:你走一手，牛人也走一手，牛人获胜并不是因为他走得比你多，而是他每一手都走在最有价值的地方。执行这样的效率，需要钢铁般的意志。谁能做到不看无聊的文章，谁能做到不去刷新网页，谁能做到不看电视新闻?牛人都能做到。 即使不想当专栏作家，做一个有学问的人总是有用的。当没学问的人大惊小怪的时候，有学问的人可以见怪不怪;当没学问的人熟视无睹的时候，有学问的人却可以见微知著。 网上有很多人用画\"思维导图\"的方法来做读书笔记，这种方法的意义也不大。流水账式的读书笔记就好像用胸围、臀围、腰围这三个数字来描写一名美女一样无趣。 好书之所以要读两遍，最重要的目的就是为了这些心得、灵感和联系。对一本讲我们不太熟悉的领域的书，在第一次读的时候，我们往往会陷入作者的思想之中，我们大脑的全部带宽都被用于理解作者的思想，而没有更多的余地去产生别的想法了。\"幽默是智力过剩的体现\"，想法也只在带宽过剩的时候才会冒出来。只有当你读第二遍的时候，你才能气定神闲地发表意见。第一遍读是为了陷进去，第二遍读是为了跳出来。 一个人的基础睾酮水平可以反映在无名指和食指的长度比上。胎儿在子宫中的发育同时受到睾酮和雌激 素的影响。这两种激素影响胎儿大脑的同时，也影响手指。睾酮水平相对雌激素水平越高，人的无名指 相对于食指就越长。","tags":"Reading","title":"读书摘记"},{"url":"http://lele1122.github.io/the-startup-of-you-zh_CN.html","text":"这本书主要从两个角度讲述了个人发展的关键因素。一个是对自己的认识与规划，另一个是周围社交圈对自己潜在的影响。 个人 你的竞争优势是由三种各不相同且不断变化的力量相互作用而形成的：你的资产、你的追求/价值观和市场现实，即你的综合能力在竞争市场的供求状况。 个人资产分为软资产和硬资产。软资产是无法转换成数字记在账面上的，而与之相对的就是硬资产。当代许多人都受过高等教育，但并没有意识到软资产的重要性。很多人都认为所受到的教育只是对于未来工作的敲门砖。对一部分人来说，一旦踏入工作岗位，就意味着不用再去学习，至少是专业知识的学习。其实大学只是学习的开始，在我个人看来它教会了我如何去学习。除了学习，还有职场人脉。人脉不是说互相只带对方姓名，互相添加微信，LinkedIn 或者 Facebook 就算拥有了人脉。人脉更应该是一种信任，在当你想换工作时，有人信任你愿意推荐给其他朋友，或者关键时刻可以帮助你。 大家如今都知道创业，似乎创业就是一种软资产的商业转化。如果去一家初创公司，有些人可能选择不要太多工资而要许多原始股份。先不说这种方式风险问题，在做这种决策之前至少你要保证有足够的资金去养活自己。此时硬资产就很重要，它影响到当前的生活状况。拥有了足够的硬资产你才可以保证在人生做出改变时有足够的缓冲时间，这样你就不会为了吃饭住房问题急着寻找一份不会带来个人增长的工作。 在个人规划时，书中提到了 ABZ计划 。A指的是我们正在从事的工作，B指的是潜在的更好的机会，更像是A的周边延伸。时代变化很快，昨天还可能是实体印刷，明天可能就成数字化排版。A和B就像这种变化，在市场中寻找机遇保持自己的竞争优势。Z计划指的是给自己定一个退路。职业规划难免会存在失败，在这种情况下可靠的Z计划可以成为人生短暂的避风港。它可以是曾经的存款，可靠的家人。它是一条救生船在你做出新的AB计划前可以保住自己。 人脉 关于人脉，我觉得书中提到的最精华的就是以下两点： 第一，嫩从对方的角度看问题。 第二，思考自己如何帮助对方或者如何与之合作，而不是想着自己能从对方身上得到什么。 其他书摘 如果说过去是一种\"预备，瞄准，射击\"的模式，如今则变成了\"瞄准，射击，再瞄准，再射击，再瞄准，再射击\"。 汽车产业的崩溃让这个\"汽车之城\"陷入了绝境。\"住在这个全美国最被人嫌弃的城市最大的好处就是，不管什么时候都不会遇到交通堵塞问题。\"当地的专栏作家沃尔什冷面幽默道。 加州大学戴维斯分校创业中心主任安迪·哈加登（Andy Hargadon）称，对很多人来说，\"20年的经验\"其实只是一年的经历重复了20次而已。如果你的职业一直处于永久测试阶段，20年的经验就会是20年实实在在的经历所得，因为每一年都将遇到崭新且丰富的挑战和机遇。\"永久测试\"从本质上来说是对个人不断成长的终生追求。 思考一下你现在在工作中发挥了怎样的价值。如果你哪天突然不去上班，公司有哪些事情没有办法完成呢？如果你不在公司一天，公司会变成什么样？这会说明你在公司的价值。再想想大家对你的哪些方面频频夸赞——这可能就是你的优势所在。 事实上，多数公司不会只执行某项单一的完美规划。相反它们会经历很多次起起落落，甚至偶尔会陷入走投无路的境地，还需要不断进行调整适应。皮克斯动画工作室最初仅仅销售专门用于制作数字动画的电脑，后来才打入电影制作领域。同样，星巴克公司最初只销售咖啡豆和制作咖啡的设备，根本没有卖杯装咖啡的打算。 除非我们需要立即动手执行B计划，否则我们开始中心定位的一种方法就是从兼职开始做起。利用晚上或周末开始学习一门技术，与相邻行业的人员建立联系。 从某种意义上说，当你和朋友见面或认识新人的时候，从本能的\"我能从中得到什么\"这个问题转移到\"我们双方能从中得到什么\"，就是这个道理。 根据人类大脑皮层的大小，邓巴计算出人类一次最多只能跟150个人建立关系。 你可以以同样的眼光审视自己的社交网络：最佳的职场社交圈具有窄/深（强连接）和宽/浅（弱连接）的特质。 只有强连接才能提供深入关系，这一点是毋庸置疑的，也是为什么这些亲密的盟友关系是你人脉中最重要的资源。但是，强连接也能为你提供某种弱连接所不能提供的关系广度。因为跟你关系深厚的人会更可能愿意将你介绍给新朋友——包括第二层关系和第三层关系。而弱连接尽管在提供新消息方面很有价值，但通常不会将你介绍给其他人，除非你能提供给他们一个强有力的理由（即除非他们能从中得到某种好处）。 失败在很多情况下都归咎于人们想要保留多重选择。我的父亲曾经告诉我：\"做一个决定，在短期内减少了机会。但是，从长远来看，还是会增加机会。\"你如果想要事业有所提升，就必须投身于特定机会，不管你是否存在怀疑，也不管它们是否会给你造成不便，因为它们是你后续计划不可分割的一部分。 记住：你不去寻找风险，风险也会自己找上门来的。 单纯堆积的事实会让你一无所成。相反，在你需要某一信息时，及时获取该信息的能力才是真正能让你有所成就的关键。 再次，人们可以为你过滤你从别处收集到的信息。他们会告诉你需要看哪本书，文章的哪个部分是重要的，哪些搜索结果可以忽略，哪些人值得信任而哪些人不值得。他们可以帮助你将注意力集中于及时可行的相关信息。在信息过多的年代，这样的好处令人难以置信。 记住我/我们公式：个人的力量可以在关系网的帮助下迅猛增长。部分原因是，当信息在那些知识渊博并且关注它的人之间来回传播时，它的信号就会增强。两个（或者更多）协作良好的人之间的合作力量总是强于单个人的力量。 开始思考这一问题的其中一种方法是将你认识的人分为三类（他们有时会重叠）： 1.领域专家。这类人是能够真正了解手头话题的行家。你碰到有关薪资沟通的问题了吗？去请教你的律师朋友，因为他已经谈妥了上百万份类似的合同。 2.十分了解你的人。你的母亲、你童年时期的朋友，这些人对于行业最新状况不是很清楚，但是他们十分了解你的优势、性格和过往。他们可以帮助你解除疑惑，有时甚至可以凭直觉知道你对自身决定带来的各种结果会有怎样的感受。 3.真正聪明的人。这些人也许不是某个特殊话题方面的专家，也许不是非常了解你。但是，有时候他们的分析能力让你受益匪浅。至少，一个非常聪明的局外人说的话很有可能与你听说的完全不同。 在所有这些工作环境中，你必须尽可能快地学习更多东西，从而来影响他人。这其实并不是什么秘密：你必须问许多问题。","tags":"Reading","title":"职业的规划"},{"url":"http://lele1122.github.io/back-pain-again-en_US.html","text":"It has been one month since last time I sprained my back. This week, I sprained it again during playing Ping Pong. I tried to do some exercises during last months and it made me feel good. I also wanted to swim but I was too lazy to go some place apart from the home. It might be a signal warning me to live and work in a healthier way. I should not fail it this time.","tags":"life","title":"Back Pain Again"},{"url":"http://lele1122.github.io/windows-in-work-en_US.html","text":"To use Microsoft Office VBA, I did borrow one windows laptop (Lenovo X1 Carbon). This is a good laptop that I want to buy before I started to use Macbook Air in the university. It is still a good laptop but with an OS that I do not want to use on the laptop - Windows, especially an office laptop. It is so difficult to use even I just wanted to install a third-party input method (Yes, you need UAC). To input Chinese characters in VBA, I had to ask Techstop for help to change locale. The resolution is quite high (2560*1440) but Windows 7 has a different font render method compared with OS X. This results the small font with such a high resolution or a blur view if you lower the resolution. This is such a waste with such screen. My Desktop(s)","tags":"life","title":"No Title Essay"},{"url":"http://lele1122.github.io/be-just-perfect-en_US.html","text":"Be just perfect is a status mentioned by Haruki Murakami mentioned in his new essays. When I was a child, I always want to be a master on everything. I wanted to get all high scores on every subjects in school; I wanted to play game better than anyone around me; I even thought one day I may be as good as a president to lead the country. Since I was at grade three, my Chinese literature score was just around average. No matter how many training courses I took to improve essay writing, I was still there. But I still thought I can be good at all other subjects in school. In fact, although I don't want to admit, the life in school taught me I cannot be the top student in all courses, not only Chinese literature. I may even cannot be the best one in Chemistry after the secondary school. But it did not mean that we should stop struggling. Yesterday, after reading the essay in his new book (Chinese version), I realised I can \"be just perfect\". I am just to the point that I am capable to do something but not 100% perfect (and there should not be any 100% perfect ability). If I am so good at everything, what should I do? Nobody can do everything since life is so short. Will it be a waste that these gifts are on myself? I think I would be panic if I am so talent but I cannot help everyone or I cannot make any accomplishment in the whole life. With his words, I find I am quite satisfied with my life even I am not a millionaire (at least till now). Sometimes, I even have pity on some people born with talent. It means they would be deemed to do something different even they may just want a normal life. This week's Joe: I played game \"TalesWeaver\"(TW) again although it is somehow an old boring game at my age.","tags":"Reading","title":"Be Just Perfect"},{"url":"http://lele1122.github.io/mid-year-plan-2016-en_US.html","text":"Overview After two days, 2016 will come to the middle of the year. As past, I made some plan in mind or paper but most of them were just staying there. Occasionally, I saw someone put some specific plans on her blog summary and realised I have never put any plans publicly. It will never be to late to do so, so here the mid-year plan comes. Review Past half year summary: Blog written: 1 Book read: 12 Courses finished: 1 Distance run: < 50km Gathering organised: 1 This result does not looks so good. Since I started working, my belly becomes fatter and it seems to be easier to be fat compared with the time in university. It becomes a concern to me since I don't want the be as fat as my father when I come to 40's. I don't want to be a skinny person without muscles when I come to 60's. Plan In the next half year, I want to improve myself at least in the field mentioned before. Blog: at least write 1 per month, ideal 1 per week Book: at least read 2 per month, ideal 1 per week Courses: at least finish 2 basic language learning (python and javascript), ideal 1 advanced level. LaTeX must be at advanced level. Running: at least 5km per week, ideal 50km per month Workout: at least 2 times per week, ideal 4 times per week Gathering: at least 1 per month, ideal 2 per month I also want to add playing badminton, playing tennis, playing table tennis and swimming to the list, but these could be limited by other external reasons. This should not be hard to accomplish once I stick to the plan I made. I need to review this plan every week to see how it goes. Good Luck and have fun!","tags":"Life","title":"Mid-Year Plan"},{"url":"http://lele1122.github.io/send-to-kindle-methods-en_US.html","text":"Preparation Kindle with WIFI connection (mine is Kindle Paperwhite 2, bought from Japan) Amazon account (Registered with your kindle; for email sending) IFTTT account (for .mobi , most easy way) Dropbox account (for .mobi ) Why Two Account Copyright problem .mobi can be sent by email to amazon account while .azw3 cannot. But why still using .azw3 ? Because it supports x-ray or Word Wise , which gives you hot highlights and difficult words hints respectively. Sending \".mobi\" Files Find the Kindle Email Address Two methods: 1. From Kindle (recommended) 2. From web From Kindle Settings --> Device Options --> Personalise your Kindle Then the Email address will show at the bottom. From web Here we use the Amazon.com account for example. To know the email addriese, follow the step: Your Account --> Manage Your Content and Devices --> Settings --> Personal Document Settings --> Send-to-Kindle E-Mail Settings Set Up Set up IFTTT by creating a folder named kindle in Dropbox and add the Kindle email address to that IFTTT Recipe. How to Use Put any .mobi files you want to read to that Dropbox folder. It will sync to your Kindle within 10 minutes. Sending \".azw3\" Files Put .azw3 files to your Dropbox folder (any folder) and download it from the Kindle browser.","tags":"Tips","title":"Send to Kindle without USB cable"},{"url":"http://lele1122.github.io/enable-alt-key-macros-en_US.html","text":"In the vim latex-suite, there are some alt key macros should be available by latex-suite reference . However, I tried several times but it only output ¬ , ∫ , ç and ˆ for some reason. Today I found that just adding set macmeta in .vimrc will work. It enables the mapping of meta key (alt/option) in macvim.","tags":"Coding","title":"Enable Alt Key Macros in LaTeX-Suite"},{"url":"http://lele1122.github.io/ibuick-work-zh_CN.html","text":"ibuick 一个很偶然的机会听到ibuick的奇人异事，于是好奇的我就google到了他。又因为在了解他的一些事情中发现了Podcasts这个神奇的网络广播工具（虽然曾在年少清狂时subscribe过一些，但对当时的我来说，然并卵）。听他说了一些个人经历，觉得很有意思。其中有句话让我醍醐灌顶： 工作经验很重要，不要为了钱找工作。找一个你会喜欢的工作。 虽说这种类似的话已经听过很多遍，但就像很多父母说的道理一样，只有你自己经历了一些，才能真正感受到这句话的含义。至少现在，还为时不晚。","tags":"Life","title":"听ibuick谈找工作"},{"url":"http://lele1122.github.io/edit-latex-with-vim-en_US.html","text":"LaTeX-Suite Requirement:Vim, latex-suite , Skim . I presume you have the knowledge of vim. If you just heard about vim and want to use latex with vim, please read the articles about vim and vundle before continue this article. Skim Preferences --> Sync --> Choose MacVim and check \"Check for file changes\" How to Use If you want to efficiently use vim to write LaTeX, please read User Manual . There is also an incomplete vim-latex cheat sheet for convenience. For me, I have met some problems like compile and view in pdf, key macros and forward and inverse search. Compile If you just read incomplete vim-latex cheat sheet , you may see \\ll for compile. Actually, \\ is <leader> by default, so you might press ,ll if you have set <leader> as , . Before you compile the .tex file, you need to save the change before compile, or the pdf file will not change. Forward and Inverse Search Forward Search: <leader>ls Inverse Search: Shift-Cmd-Click Key Macros I do not know the reason why key macros can not be used. If you know, please tell me. <F9> -Completion You may need to edit texrc file for the <F9> -completion of \\includegraphics{ , or it will not work: TexLet g:Tex_ImageDir = '.'","tags":"Coding","title":"Edit LaTeX with Vim"},{"url":"http://lele1122.github.io/sublime-latex-skim-en_US.html","text":"Preparation Sublime Text 3 + LaTeXTools + Skim Sublime Text 3 You can download Sublime Text 3 for the evaluation without enforced time limit. LaTeXTools LaTeXTools is a plugin for Sublime Text 3 , which provides LaTeX supports. Install Package Control by following the instructions in Package Control . In the Sublime Text 3 window, press Command + Shift + P (Command Palette) and type in install and return. It will search for a while. Then find LaTeXTools and install. Package control install If you are installing LaTeXTools for the first time, you need to create a configuration file, LaTeXTools.sublime-settings , in your User directory (off the Packages) directory. To do so, open the command palette from the Tools menu, search for \"LaTeXTools: Reconfigure and migrate settings,\" and hit Return. Skim Skim is a PDF reader to view PDF files. Basic Operations Most LaTeXTools facilities are triggered using Ctrl-l (Windows, Linux) or Cmd-l (OS X), followed by some other key or key combination. Compiling LaTeX files Keybinding: Cmd-b Multi-file documents : first line in the current file consists of the text %!TEX root = <master file name> . TeX engine selection : first line of the current file consists of the text %!TEX program = <program> . 'pdflatex' is the default. For multi-file documents, the directive must be in the root file. Tips Forward Searching : C-l,j Reverse Searching : Cmd+shift+click in Skim, noble-clicking in Sumatra. Jumping to sections and labels : C-r commands and environments : C-l,c for commands and C-l,e for environment. Wrapping : C-l,C-c wraps the selected text in a LaTeX command structure, e.g. blah to \\cmd{blah} . Then tab to the end of command. C-l,C-e gives you \\emph{blah} , and the cursor moves to the end of the command. C-l,C-b gives you \\textbf{blah} C-l,C-u gives you \\underline{blah} C-l,C-t gives you \\texttt{blah} C-l,C-n wraps the selected text in a LaTeX environment structure. You get \\begin{env} , blah , \\end{env} on three separate lines, with env selected. Change env to whatever environment you want, then hit Tab to move to the end of the environment. Snippets : Tools|Snippets","tags":"Coding","title":"Sublime Text + LaTeX Tool + Skim"},{"url":"http://lele1122.github.io/bash-to-zsh-en_US.html","text":"Install Zsh With Homebrew, you can just install Zsh by: $ brew install zsh As a beginner, you need not to memorise all the commands' options with autocomplete features of Zsh. The config can be simply clone from oh-my-zsh , which is one of the most starred projects in GitHub and it just fits us beginners! Here are some reasons why using Zsh instead of Bash: 9 reason to use zsh (zh-CN) . Plugin Tips git The plugin Git is installed by default. It is very helpful to use the alias provided in this plugin. Alias Command g git ga git add gas git add --all gcmsg git commit -m ggp git push origin $(current_branch) More alias can be viewed in Git Commands Cheat Sheet . autojump Autojump helps to go to the past folders with j and the folder's name (fuzzy search) to fast jump in Zsh. It is one of the most powerful plugins in Zsh. First, you need to install it: $ brew install autojump Then Remember to add the following code in .zshrc : [[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh osx man-preview file: open file in pdf by preview quick-look: quick preview pfd: show to the folder of current finder cdf: change to the folder of current finder","tags":"Coding","title":"From Bash to Zsh"},{"url":"http://lele1122.github.io/red-cooked-pork-zh_CN.html","text":"有时候一道菜做了即便还是没能做好，主要原因是没有总结归纳。为了防止以后出现类似问题，我把最近做一道菜可能错误写下以免日后再犯。 这里先写一道关于红烧肉的。毛氏红烧肉，不放酱油。 材料 五花肉，料酒，老姜，蒜蓉，糖，盐，水，葱花 当然还有八角花椒桂皮什么的等等，我暂时都没就没用，如果加了味道应该更浓郁。 因为没有度量工具，总是没法很精确的计算出用量，这里先凑合的写：适量 （不许笑！） 步骤 生肉处理 其实关于红烧肉有很多做法，这篇所写的应该算是毛氏红烧肉。网上有很多教程，比如要开水煮肉块，炒完糖色直接放红烧肉；有的要冷水煮整块之后才能切肉，有的都不过水直接放入一大锅油来脱脂。每个都是饭店大厨，你也分不清谁家的更好。 总之，我是整块放入冷水里慢慢煮来过血水,加入葱姜蒜陈皮八角，大约25分钟。最终煮出来也挺嫩，不过也有可能是最后一步骤炖肉时炖嫩的，毕竟我不可能过完血水直接咬一口肉吧。然后切成块以备后用。 关键 ：凉水，不加盐 过水后切块五花肉 炒糖色 锅中放油，放入大量白砂糖或者冰糖或者红糖，炒至红褐色冒泡，然后加点水搅匀。 炒肉 锅中热油，加各种葱姜，有香味后继续加各种大料，然后加肉块。煸肉的时候要10-15分钟让油析出，表面金黄。然后可以加入糖色，大碗黄酒, 少许水，大火炖5分钟左右后小火炖半小时左右。最后大火收汁盛出。 红烧肉完成 关键 ：不加酱油","tags":"Cooking","title":"毛氏红烧肉"},{"url":"http://lele1122.github.io/vim-tutorial-plugins-en_US.html","text":"Add Plugins With Plugins, you can use Vim more efficiently. But you'd better be proficient with Vim before adding any plugins. There are many ways to add plugins, but it would be hard to manage plugins. To solve this problem, the plugin manager Vundle will be helpful. Vundle Set-Up $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle Configure Plugins Put this at the top of your .vimrc to use Vundle. Remove plugins you don't need, they are for illustration purposes. set nocompatible \" be iMproved, required filetype off \" required \" set the runtime path to include Vundle and initialize set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() \" alternatively, pass a path where Vundle should install plugins \"call vundle#begin('~/some/path/here') \" let Vundle manage Vundle, required Plugin 'VundleVim/Vundle.vim' \" The following are examples of different formats supported. \" Keep Plugin commands between vundle#begin/end. \" plugin on GitHub repo Plugin 'tpope/vim-fugitive' \" plugin from http://vim-scripts.org/vim/scripts.html Plugin 'L9' \" Git plugin not hosted on GitHub Plugin 'git://git.wincent.com/command-t.git' \" git repos on your local machine (i.e. when working on your own plugin) Plugin 'file:///home/gmarik/path/to/plugin' \" The sparkup vim script is in a subdirectory of this repo called vim. \" Pass the path to set the runtimepath properly. Plugin 'rstacruz/sparkup', {'rtp': 'vim/'} \" Avoid a name conflict with L9 Plugin 'user/L9', {'name': 'newL9'} \" All of your Plugins must be added before the following line call vundle#end() \" required filetype plugin indent on \" required \" To ignore plugin indent changes, instead use: \"filetype plugin on \" Put your non-Plugin stuff after this line Brief Instructions :PluginList - lists configured plugins :PluginInstall - installs plugins; append ! to update or just :PluginUpdate :PluginSearch foo - searches for foo; append ! to refresh local cache :PluginClean - confirms removal of unused plugins; append ! to auto-approve removal :h vundle for more details or wiki for FAQ You may see some people use BundleXxxx instead of PluginXxxx . They are nearly the same but PluginXxxx is recommended since 2014. BundleXxxx still can be used only for compatibility reasons.","tags":"Coding","title":"Vim Tutorial (4)"},{"url":"http://lele1122.github.io/vim-tutorial-theme-en_US.html","text":"Theme Tomorrow Solarized Molokai Put theme file in ~/.vim/colors and add set runtimepath+=~/.vim in ~/.vimrc . Font You need to make sure the font has already existed in the system. If not, you need to add TTF file. Here I use Source-Code-Pro and Adobe Font Development Kit for OpenType (AFDKO) will be needed to build this font file. Double click FinishInstallOSX to install AFDKO and run $ ./build.sh in the downloaded font directory to build all TTF. They will be in the target folder. Open Font Book in Mac and add all the TTF files into it by click + . Then you need to add the following to .vimrc remember to use _ instead of space: \"set font and size set guifont=Source_Code_Pro:h15","tags":"Coding","title":"Vim Tutorial (3)"},{"url":"http://lele1122.github.io/vim-tutorial-config-en_US.html","text":"~/.gvimrc Configure ~/.vimrc and There are two setting files should be known: vimrc and gvimrc . They have two versions: system and user. vimrc : the main vim configuration file To get the system vimrc location: :echo $ VIM To get the user vimrc location: :echo $ HOME If you have never created user vimrc before, you need to create one by yourself. It is .vimrc , a hidden file. The user .vimrc will always overwrite the system vimrc . Thus, you only need to change the user .vimrc to configure vim . It will not affect other users if Mac has other users. gvimrc : the configuration file for Gvim Gvim is Vim with GUI. It supports cursor, has more color and some other features. We only use gvimrc for gvim specific additions, e.g. theme color. Here is the command to create .vimrc and .gvimrc from vimc_example.vim and gvimrc_example.vim :e $ VIMRUNTIME /vimrc_example.vim :saveas ~/.vimrc :e $ VIMRUNTIME /gvimrc_example.vim :saveas ~/.gvimrc \" is used for comment in .vimrc You may want to edit .vimrc in Terminal by: $ open /Applications/TextEdit.app .vimrc or in MacVim by: :e .vimrc","tags":"Coding","title":"Vim Tutorial (2)"},{"url":"http://lele1122.github.io/vim-tutorial-start-en_US.html","text":"Text Editors It is said there are three text editors in the world: Emacs , Vim and others. No matter whether it is true or wrong (depending on you), you cannot deny that Emacs and Vim are two powerful text editors. The debates between Emacs group and Vim group have never stopped. Emacs is considered as 'God's editor' while Vim is 'the God of editor'. Emac is actually an OS which pretends to be an editor. Why Vim With curiosity, I did search and found the following picture describing the learning curves of some common text editors. Study Curve of Editors It can be seen Vim has a very steep study curve and Emacs has a @#$%&#94;&* ... I choose Vim because it can be used in any OS, extendibility, and it looks cool! MacVim Installation Mac has Vim already in terminal, but MacVim works better than the vim in Mac. There are two methods to install MacVim: Download MacVim and follow the instructions in README_mac.txt . You can open MacVim directly as a normal app. This method help to configure MacVim easier. You can also open MacVim from Terminal once you set by this (temporary): $ alias mvim = '/Applications/MacVim.app/Contents/MacOS/MacVim' With this installation method, I do not know a simple method to change persistently after upgrading to El Capitan with rootless usr folder. If you know, please tell me. To install MacVim by Terminal (You must have installed Homebrew): $ brew install macvim To start MacVim: $ mvim Ready to Use ?! Basic Level After you start MacVim, it is in the mode normal , to enter mode insert , press i . You will see -insert- at left-bottom corner of Vim. If you want to return normal mode, press ESC . All the commands should be done in normal mode. Some basic command: i → Insert mode ESC → Normal mode x → delete character :w → save file (add file name after :w) :q → quit :wq → save file and quit dd → delete the present sentence and copy to clipboard p → paste from clipboard hjkl → (←↓↑→) :help <command> → display the help Practice and you can do the basic job that Notepad can do. Advanced Level As mentioned before, Vim has a very steep learning curve. If you want to learn more, please practice with online tutorials. Please practice every week and do not use it at work before you can really efficiently use it. Study Resources Basic: vimtutor: $ vimtutor vimtutor (CN): $ vimtutor zh Vim-Adventures : game to familiar with the basic hotkeys. Interactive Vim Tutorial : online typing tutorial Learn-Vim-Progressively (LVP) 简明 Vim 练级攻略 (LVP CN translation) Graphical Cheat Sheet A vim Tutorial and Primer","tags":"Coding","title":"Vim Tutorial (1)"},{"url":"http://lele1122.github.io/haze-zh_CN.html","text":"来新加坡已经将近5年了。期间心情有好有坏，就像曾经所写的博客一样，在忙碌中不知不觉的长草忘却。转眼间，自己都已经毕业了，回顾过去，有些事情还是那么的相似。无论在屋内心情如何，每次出门，新加坡的天气却让人精神振奋。蓝天白云，让长期在中国雾霾下成长的感慨蓝天是外国的蓝。 我记得在来新加坡的前几个月，我还因为看了一段鞭刑的视频说到长大不会前往新加坡，这个国家的刑法过于恐怖。可话说没多久，不知不觉的进了前往新加坡学习的项目。就像一个多月前，我看着新加坡本地论坛上有人二手售卖着空气净化器，对一旁的女朋友说：\"在新加坡还有人往家里买空气净化器？搞笑呢。\" 搞笑的却是没过多久，新加坡就被印尼烧芭所引发的森林大火产生的烟霾覆盖。空气中所弥漫的焦味即便在门窗关紧的室内都能闻到。从家中窗口望出去，楼下的公园几乎成为\"仙境\": 上图为烟霾前，下图为烟霾后 出于无奈，只好上网购买了N95口罩。有时候不得不感慨新加坡物价之贵，好多东西自己网上从中国快递买来都能比楼下超市购买便宜一倍。可以理解新加坡食物贵，但各种电子，生活产品为何如此之贵，有时甚至比其他地区贵上一倍，让好多人不得不从美亚或者淘宝购买，费解。 茶余饭后，再也不能轻松的去楼下跑跑步，散散心；也不能开着窗呼吸新鲜空气；甚至不能拉开窗帘，因为小小的缝隙让屋外的焦味肆意侵入。 唯一庆幸的是父母来的日子。他们好不容易有机会能出国感受国内看不到的蓝天白云，幸亏没在这段时间过来。","tags":"life","title":"烟霾"},{"url":"http://lele1122.github.io/pelican-settings-en_US.html","text":"Disqus Comments feature can be added by Disqus . If you do not have it, just register an account and set by steps. Add the following command in pelicanconf.py : $ DISQUS_SITENAME = 'shortname' At first I tried several times but the function did not work. The reason is that I ignored the SITEURL . To enable the comments feature, even you do not have a domain, you need to add the github page url: $ ITEURL = 'http://username.github.io' Theme If you want to use themes other than the default one, you need to download the themes you want first. There is one way: $ cd blog $ git clone https://github.com/getpelican/pelican-themes.git $ cd pelican-themes It seems that some themes are lost when I clone them from pelican github, so it will be better to check the folders before using them. You can always download themes online and put them in the folder you want. Then, you can choose the themes you have in the pelican-themes folder. To change the theme, you need to configure in pelicanconf.py .For example: $ THEME = '/Users/User/Blog/pelican-themes/elegant' Search The theme elegent v1.3 should have included the following search engin plugin. Tipue Search , an open source site search engine jQuery plugin available under the MIT License , is used in my theme. BeautifulSoup is required to use this plugin: $ sudo pip install beautifulsoup4 The latest Tipue Search is version 5.0. If you meet any problem with the search, please replace the default version with the newest version in Tipue Search . The format may change because of the replacement, so you may need to modify the tipuesearch.css file or just use the default version. By the test, I found the main problem the all the results are undefined may be caused by default tipuesearch_set.js file in this theme. Plugins Easiest way to install and use these plugins is cloning this repo: $ git clone --recursive https://github.com/getpelican/pelican-plugins and activating the ones you want in your settings file: $ PLUGIN_PATHS = [ '/Users/User/Blog/pelican-plugins' ] $ PLUGINS = [ 'tipue_search' ] The detail of plugins can be read from on GitHub . Pages If you create a folder named pages , all the files in this folder will be static pages. All the pages can be added to the menu By setting DISPLAY_PAGES_ON_MENU in pelicanconf.py .","tags":"Coding","title":"Introduction to Pelican (2)"},{"url":"http://lele1122.github.io/pelican-intro-en_US.html","text":"Overview This is my first time to use GitHub and Pelican to creating a personal website (blog page). The whole progress was made on Mac OS X, although I tried on the Windows 7 first. It proved it would be much more convenient if you tried on Mac. Preparation If this is your first time to use terminal, it will be better to get some basic knowledge about it. Google is always your good teachers and friends! Github should also be learnt if you do not want to be massed with the git codes. Here are some recommended websites: Terminal Introduction to the Mac OS X Command Line Terminal Cheatsheet for Mac (basics) GitHub GitHub教程 (zh-CN) git-scm (En) git-scm (zh-CN) You need to register a GitHub account before the Pelican Setup. A repository named username.github.io should also be created. To reduce trouble, README file is not recommended to be created for the beginner of GitHub. They will be used in Chapter Pelican Setup . Configure local environment You will also need to install some basic package before this tutorial. I presume most latest Mac OS X come with Python.It may require administrator password for $ sudo . Install pip ( get-pip.py ): $ sudo python get-pip.py Install Pelican (most important) and Markdown (to support .md ): $ sudo pip install pelican $ sudo pip install markdown Some people may have ValueError because of the unicode. You can check weather your terminal environment is in UTF-8 by $ locale . If not, you can temporarily change it by: $ export LC_ALL = en_US.UTF-8 $ export LANG = en_US.UTF-8 To change it persistently, you need to add above command in ~/.profile . Pelican Setup Create a local folder for the blog: $ mkdir blog #you can decide the name you want $ cd blog Initialise the blog: $ pelican-quickstart Some people may have the error ImportError: No module named html_parser . Here is the solution: open the file /Library/Python/2.7/site-packages/pelican/readers.py replace from six.moves.html_parser import HTMLParser at line 24 with from HTMLParser import HTMLParser If everything goes well, the instruction will pop up. Just follow the steps: $ pelican-quickstart Where do you want to create your new web site? [ . ] What will be the title of this web site? > <GitHub username> e.g. abc123 Who will be the author of this web site? > <name you want to use> e.g John What will be the default language of this web site? [ en ] Do you want to specify a URL prefix? e.g., http://example.com ( Y/n ) What is your URL prefix? ( see above example ; no trailing slash ) > http://username.github.io Do you want to enable article pagination? ( Y/n ) How many articles per page do you want? [ 5 ] Do you want to generate a Fabfile/Makefile to automate generation and publishing? ( Y/n ) Do you want an auto-reload & simpleHTTP script to assist with theme and site development? ( Y/n ) Do you want to upload your website using FTP? ( y/N ) Do you want to upload your website using SSH? ( y/N ) Do you want to upload your website using Dropbox? ( y/N ) Do you want to upload your website using S3? ( y/N ) Do you want to upload your website using Rackspace Cloud Files? ( y/N ) If you want to take a look of the tree structure of the generated files, please install Homebrew and tree: $ ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \" $ brew install tree Then you can use command $ tree to read the folder like this: blog/ ├── content ├── output ├── develop_server.sh ├── Makefile ├── pelicanconf.py └── publishconf.py Writing articles The default folder for writing articles are set in the /blog/content , which can be configured in pelicanconf.py if you want. In this tutorial, the article ( .md file)is put in content . Pelican needs metadata like Title (must), Date (optional) and other optional information for smart settings. For example: Title : Introduction to Creating GitHub Pages with Pelican Date : 2015 - 09 - 13 21 : 07 Modified : 2015 - 09 - 13 21 : 07 Category : Coding Tags : GitHub , Pelican , Markdown Slug : Blog Authors : Joe Summary : Creating Blog Here is the content you want to write in Markdown style .... To generate the site locally, you can run command: $ make devserver It serves your site to http://localhost:8000 . You can preview the website locally first. Or you can just generate html without testing $ make html No matter which method you choose, some .html file will be generated in folder output . To debug easily and for the future convenient, I recommend to new a folder under blog, e.g. /blog/gitblog and copy the files in output to this folder. Why? I will explain later. Upload the pages Since all the html files are prepared, we only need to upload them to our GitHub. These part should be done after you have a basic knowledge of GitHub . If you have already created README file in GitHub, you may need to add $ git pull origin master before $ git add . . $ cd gitblog $ git init $ git remote add origin https://github.com/username/username.github.io $ git add . $ git commit -m \"first commit\" $ git push -u origin master You may need to input GitHub username and passward if you do not use SSH key introduced in Chapter GitHub . If no error, you can visit you blog by username.github.io. If you are as lazy as me, you can also use make github directly after make html . Modify and update pages The reason to create another folder instead using output to upload pages is that every time you use $ make html , output will be replaced with new files. Thus, it would be better to copy the files from output into gitblog before uploading. Here is some commands for delete and update files: $ git rm ×××.html $ git add . $ git commit -m \"some message\" $ git push -u origin master Summary This article is only the introduction of setting up a personal blog by using GitHub and Pelican . Since this is my first time to use it, some condition my not be covered. Please comment below if there is any error.","tags":"Coding","title":"Introduction to Pelican (1)"},{"url":"http://lele1122.github.io/vim-airline-en_US.html","text":"Airline Vim-airline and powerline are both statusline plugins can be used for vim. If you want to use statusline for vim only, try the lightweight plugin Vim-airline . It is easier to setup than powerline . Vim-airline (normal mode) Vim-ariline (insert model) You can install the plugin by the tutorial Add Plugins by Vundle . Here is the basic settings for airline: set laststatus=2 \" Show statusline all the time let g:airline_powerline_fonts = 1 \" Use powerline symbols (You need powerline-symbol-patched fonts installed) You can download patched fonts from powerline-fonts or use font patcher to patch your favourite font with symbols.","tags":"Coding","title":"Vim Tutorial"}]}