{"pages":[{"url":"http://lele1122.github.io/Me.html","text":"Welcome to +OK! My name is Jiahao (Joe), a fresh graduate from National University of Singapore. This is a blog to share what I know and what I think during my daily life. If you want to know more about me, feel free to contact with me: plusok516@gmail.com","tags":"About","title":"About"},{"url":"http://lele1122.github.io/red-cooked-pork-zh-CN.html","text":"有时候一道菜做了即便还是没能做好，主要原因是没有总结归纳。为了防止以后出现类似问题，我把最近做一道菜可能错误写下以免日后再犯。 这里先写一道关于红烧肉的。毛氏红烧肉，不放酱油。 材料 五花肉，料酒，老姜，蒜蓉，糖，盐，水，葱花 当然还有八角花椒桂皮什么的等等，我暂时都没就没用，如果加了味道应该更浓郁。 因为没有度量工具，总是没法很精确的计算出用量，这里先凑合的写：适量 （不许笑！） 步骤 生肉处理 其实关于红烧肉有很多做法，这篇所写的应该算是毛氏红烧肉。网上有很多教程，比如要开水煮肉块，炒完糖色直接放红烧肉；有的要冷水煮整块之后才能切肉，有的都不过水直接放入一大锅油来脱脂。每个都是饭店大厨，你也分不清谁家的更好。 总之，我是整块放入冷水里慢慢煮来过血水,加入葱姜蒜陈皮八角，大约25分钟。最终煮出来也挺嫩，不过也有可能是最后一步骤炖肉时炖嫩的，毕竟我不可能过完血水直接咬一口肉吧。然后切成块以备后用。 关键 ：凉水，不加盐 炒糖色 锅中放油，放入大量白砂糖或者冰糖或者红糖，炒至红褐色冒泡，然后加点水搅匀。 炒肉 锅中热油，加各种葱姜，有香味后继续加各种大料，然后加肉块。煸肉的时候要10-15分钟让油析出，表面金黄。然后可以加入糖色，大碗黄酒, 少许水，大火炖5分钟左右后小火炖半小时左右。最后大火收汁盛出。 关键 ：不加酱油","tags":"Cooking","title":"毛氏红烧肉"},{"url":"http://lele1122.github.io/vim-tutorial-plugins-en-US.html","text":"Add Plugins With Plugins, you can use Vim more efficiently. But you'd better be proficient with Vim before adding any plugins. There are many ways to add plugins, but it would be hard to manage plugins. To solve this problem, the plugin manager Vundle will be helpful. Vundle Set-Up $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle Configure Plugins Put this at the top of your .vimrc to use Vundle. Remove plugins you don't need, they are for illustration purposes. set nocompatible \" be iMproved, required filetype off \" required \" set the runtime path to include Vundle and initialize set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() \" alternatively, pass a path where Vundle should install plugins \"call vundle#begin('~/some/path/here') \" let Vundle manage Vundle, required Plugin 'VundleVim/Vundle.vim' \" The following are examples of different formats supported. \" Keep Plugin commands between vundle#begin/end. \" plugin on GitHub repo Plugin 'tpope/vim-fugitive' \" plugin from http://vim-scripts.org/vim/scripts.html Plugin 'L9' \" Git plugin not hosted on GitHub Plugin 'git://git.wincent.com/command-t.git' \" git repos on your local machine (i.e. when working on your own plugin) Plugin 'file:///home/gmarik/path/to/plugin' \" The sparkup vim script is in a subdirectory of this repo called vim. \" Pass the path to set the runtimepath properly. Plugin 'rstacruz/sparkup', {'rtp': 'vim/'} \" Avoid a name conflict with L9 Plugin 'user/L9', {'name': 'newL9'} \" All of your Plugins must be added before the following line call vundle#end() \" required filetype plugin indent on \" required \" To ignore plugin indent changes, instead use: \"filetype plugin on \" Put your non-Plugin stuff after this line Brief Instructions :PluginList - lists configured plugins :PluginInstall - installs plugins; append ! to update or just :PluginUpdate :PluginSearch foo - searches for foo; append ! to refresh local cache :PluginClean - confirms removal of unused plugins; append ! to auto-approve removal :h vundle for more details or wiki for FAQ You may see some people use BundleXxxx instead of PluginXxxx . They are nearly the same but PluginXxxx is recommended since 2014. BundleXxxx still can be used only for compatibility reasons.","tags":"Coding","title":"Vim Tutorial (4)"},{"url":"http://lele1122.github.io/vim-tutorial-theme-en-US.html","text":"Theme Tomorrow Solarized Molokai Put theme file in ~/.vim/colors and add set runtimepath+=~/.vim in ~/.vimrc . Font You need to make sure the font has already existed in the system. If not, you need to add TTF file. Here I use Source-Code-Pro and Adobe Font Development Kit for OpenType (AFDKO) will be needed to build this font file. Double click FinishInstallOSX to install AFDKO and run $ ./build.sh in the downloaded font directory to build all TTF. They will be in the target folder. Open Font Book in Mac and add all the TTF files into it by click + . Then you need to add the following to .vimrc remember to use _ instead of space: \"set font and size set guifont=Source_Code_Pro:h15","tags":"Coding","title":"Vim Tutorial (3)"},{"url":"http://lele1122.github.io/vim-tutorial-config-en-US.html","text":"~/.gvimrc Configure ~/.vimrc and There are two setting files should be known: vimrc and gvimrc . They have two versions: global and user. vimrc : the main vim configuration file To get the global vimrc location: :echo $ VIM To get the user vimrc location: :echo $ HOME If you have never created user vimrc before, you need to create one by yourself. The user vimrc will always overwrite the global vimrc . Thus, you only need to change the user vimrc to configure vim . gvimrc : the configuration file for Gvim Ghim is Vim with GUI. It supports cursor, has more color and some other features. We only use gvimrc for gvim specific additions, e.g. theme color. Here is the command to create .vimrc and .gvimrc from vimc_example.vim and gvimrc_example.vim :e $ VIMRUNTIME /vimrc_example.vim :saveas ~/.vimrc :e $ VIMRUNTIME /gvimrc_example.vim :saveas ~/.gvimrc \" is used for comment in .vimrc You may want to edit .vimrc in Terminal by: $ open /Applications/TextEdit.app .vimrc or in MacVim by: :e .vimrc","tags":"Coding","title":"Vim Tutorial (2)"},{"url":"http://lele1122.github.io/vim-tutorial-start-en-US.html","text":"Text Editors It is said there are three text editors in the world: Emacs , Vim and others. No matter whether it is true or wrong (depending on you), you cannot deny that Emacs and Vim are two powerful text editors. The debates between Emacs group and Vim group have never stopped. Emacs is considered as 'God's editor' while Vim is 'the God of editor'. Emac is actually an OS which pretends to be an editor. Why Vim With curiosity, I did search and found the following picture describing the learning curves of some common text editors. Study Curve of Editors It can be seen Vim has a very steep study curve and Emacs has a @#$%&#94;&* ... I choose Vim because it can be used in any OS, extendibility, and it looks cool! MacVim Installation Mac has Vim already in terminal, but MacVim works better than the vim in Mac. There are two methods to install MacVim: Download MacVim and follow the instructions in README_mac.txt . You can open MacVim directly as a normal app. This method help to configure MacVim easier. You can also open MacVim from Terminal once you set by this (temporary): $ alias mvim = '/Applications/MacVim.app/Contents/MacOS/MacVim' With this installation method, I do not know a simple method to change persistently after upgrading to El Capitan with rootless usr folder. If you know, please tell me. To install MacVim by Terminal (You must have installed Homebrew): $ brew install macvim To start MacVim: $ mvim Ready to Use ?! Basic Level After you start MacVim, it is in the mode normal , to enter mode insert , press i . You will see -insert- at left-bottom corner of Vim. If you want to return normal mode, press ESC . All the commands should be done in normal mode. Some basic command: i → Insert mode ESC → Normal mode x → delete character :w → save file (add file name after :w) :q → quit :wq → save file and quit dd → delete the present sentence and copy to clipboard p → paste from clipboard hjkl → (←↓↑→) :help <command> → display the help Practice and you can do the basic job that Notepad can do. Advanced Level As mentioned before, Vim has a very steep learning curve. If you want to learn more, please practice with online tutorials. Please practice every week and do not use it at work before you can really efficiently use it. Study Resources Basic: Vim-Adventures : game to familiar with the basic hotkeys. Interactive Vim Tutorial : online typing tutorial 简明 Vim 练级攻略 Graphical Cheat Sheet A vim Tutorial and Primer","tags":"Coding","title":"Vim Tutorial (1)"},{"url":"http://lele1122.github.io/haze-zh_CN.html","text":"来新加坡已经将近5年了。期间心情有好有坏，就像曾经所写的博客一样，在忙碌中不知不觉的长草忘却。转眼间，自己都已经毕业了，回顾过去，有些事情还是那么的相似。无论在屋内心情如何，每次出门，新加坡的天气却让人精神振奋。蓝天白云，让长期在中国雾霾下成长的感慨蓝天是外国的蓝。 我记得在来新加坡的前几个月，我还因为看了一段鞭刑的视频说到长大不会前往新加坡，这个国家的刑法过于恐怖。可话说没多久，不知不觉的进了前往新加坡学习的项目。就像一个多月前，我看着新加坡本地论坛上有人二手售卖着空气净化器，对一旁的女朋友说：\"在新加坡还有人往家里买空气净化器？搞笑呢。\" 搞笑的却是没过多久，新加坡就被印尼烧芭所引发的森林大火产生的烟霾覆盖。空气中所弥漫的焦味即便在门窗关紧的室内都能闻到。从家中窗口望出去，楼下的公园几乎成为\"仙境\": 上图为烟霾前，下图为烟霾后 出于无奈，只好上网购买了N95口罩。有时候不得不感慨新加坡物价之贵，好多东西自己网上从中国快递买来都能比楼下超市购买便宜一倍。可以理解新加坡食物贵，但各种电子，生活产品为何如此之贵，有时甚至比其他地区贵上一倍，让好多人不得不从美亚或者淘宝购买，费解。 茶余饭后，再也不能轻松的去楼下跑跑步，散散心；也不能开着窗呼吸新鲜空气；甚至不能拉开窗帘，因为小小的缝隙让屋外的焦味肆意侵入。 唯一庆幸的是父母来的日子。他们好不容易有机会能出国感受国内看不到的蓝天白云，幸亏没在这段时间过来。","tags":"Self","title":"烟霾"},{"url":"http://lele1122.github.io/pelican-settings-en-US.html","text":"Disqus Comments feature can be added by Disqus . If you do not have it, just register an account and set by steps. Add the following command in pelicanconf.py : $ DISQUS_SITENAME = 'shortname' At first I tried several times but the function did not work. The reason is that I ignored the SITEURL . To enable the comments feature, even you do not have a domain, you need to add the github page url: $ ITEURL = 'http://username.github.io' Theme If you want to use themes other than the default one, you need to download the themes you want first. There is one way: $ cd blog $ git clone https://github.com/getpelican/pelican-themes.git $ cd pelican-themes It seems that some themes are lost when I clone them from pelican github, so it will be better to check the folders before using them. You can always download themes online and put them in the folder you want. Then, you can choose the themes you have in the pelican-themes folder. To change the theme, you need to configure in pelicanconf.py .For example: $ THEME = '/Users/User/Blog/pelican-themes/elegant' Search The theme elegent v1.3 should have included the following search engin plugin. Tipue Search , an open source site search engine jQuery plugin available under the MIT License , is used in my theme. BeautifulSoup is required to use this plugin: $ sudo pip install beautifulsoup4 The latest Tipue Search is version 5.0. If you meet any problem with the search, please replace the default version with the newest version in Tipue Search . The format may change because of the replacement, so you may need to modify the tipuesearch.css file or just use the default version. By the test, I found the main problem the all the results are undefined may be caused by default tipuesearch_set.js file in this theme. Plugins Easiest way to install and use these plugins is cloning this repo: $ git clone --recursive https://github.com/getpelican/pelican-plugins and activating the ones you want in your settings file: $ PLUGIN_PATHS = [ '/Users/User/Blog/pelican-plugins' ] $ PLUGINS = [ 'tipue_search' ] The detail of plugins can be read from on GitHub . Pages If you create a folder named pages , all the files in this folder will be static pages. All the pages can be added to the menu By setting DISPLAY_PAGES_ON_MENU in pelicanconf.py .","tags":"Coding","title":"Introduction to Pelican (2)"},{"url":"http://lele1122.github.io/pelican-intro-en-US.html","text":"Overview This is my first time to use GitHub and Pelican to creating a personal website (blog page). The whole progress was made on Mac OS X, although I tried on the Windows 7 first. It proved it would be much more convenient if you tried on Mac. Preparation If this is your first time to use terminal, it will be better to get some basic knowledge about it. Google is always your good teachers and friends! Github should also be learnt if you do not want to be massed with the git codes. Here are some recommended websites: Terminal Introduction to the Mac OS X Command Line Terminal Cheatsheet for Mac (basics) GitHub GitHub教程 (zh-CN) git-scm (En) git-scm (zh-CN) You need to register a GitHub account before the Pelican Setup. A repository named username.github.io should also be created. To reduce trouble, README file is not recommended to be created for the beginner of GitHub. They will be used in Chapter Pelican Setup . Configure local environment You will also need to install some basic package before this tutorial. I presume most latest Mac OS X come with Python.It may require administrator password for $ sudo . Install pip: $ sudo python get-pip.py Install Pelican (most important) and Markdown (to support .md ): $ sudo pip install pelican $ sudo pip install markdown Some people may have ValueError because of the unicode. You can check weather your terminal environment is in UTF-8 by $ locale . If not, you can temporarily change it by: $ export LC_ALL = en_US.UTF-8 $ export LANG = en_US.UTF-8 To change it persistently, you need to add above command in ~/.profile . Pelican Setup Create a local folder for the blog: $ mkdir blog #you can decide the name you want $ cd blog Initialise the blog: $ pelican-quickstart Just follow the steps to initialize: $ pelican-quickstart Where do you want to create your new web site? [ . ] What will be the title of this web site? > <GitHub username> e.g. abc123 Who will be the author of this web site? > <name you want to use> e.g John What will be the default language of this web site? [ en ] Do you want to specify a URL prefix? e.g., http://example.com ( Y/n ) What is your URL prefix? ( see above example ; no trailing slash ) > http://username.github.io Do you want to enable article pagination? ( Y/n ) How many articles per page do you want? [ 5 ] Do you want to generate a Fabfile/Makefile to automate generation and publishing? ( Y/n ) Do you want an auto-reload & simpleHTTP script to assist with theme and site development? ( Y/n ) Do you want to upload your website using FTP? ( y/N ) Do you want to upload your website using SSH? ( y/N ) Do you want to upload your website using Dropbox? ( y/N ) Do you want to upload your website using S3? ( y/N ) Do you want to upload your website using Rackspace Cloud Files? ( y/N ) If you want to take a look of the tree structure of the generated files, please install Homebrew and tree: $ ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \" $ brew install tree Then you can use command $ tree to read the folder like this: blog/ ├── content ├── output ├── develop_server.sh ├── Makefile ├── pelicanconf.py └── publishconf.py Writing articles The default folder for writing articles are set in the /blog/content , which can be configured in pelicanconf.py if you want. In this tutorial, the article ( .md file)is put in content . Pelican needs metadata like Title (must), Date (optional) and other optional information for smart settings. For example: Title : Introduction to Creating GitHub Pages with Pelican Date : 2015 - 09 - 13 21 : 07 Modified : 2015 - 09 - 13 21 : 07 Category : Coding Tags : GitHub , Pelican , Markdown Slug : Blog Authors : Joe Summary : Creating Blog Here is the content you want to write in Markdown style .... To generate the site locally, you can run command: $ make devserver It serves your site to http://localhost:8000 . You can preview the website locally first. Or you can just generate html without testing $ make html No matter which method you choose, some .html file will be generated in folder output . To debug easily and for the future convenient, I recommend to new a folder under blog, e.g. /blog/gitblog and copy the files in output to this folder. Why? I will explain later. Upload the pages Since all the html files are prepared, we only need to upload them to our GitHub. These part should be done after you have a basic knowledge of GitHub . If you have already created README file in GitHub, you may need to add $ git pull origin master before $ git add . . $ cd gitblog $ git init $ git remote add origin https://github.com/username/username.github.io $ git add . $ git commit -m \"first commit\" $ git push -u origin master You may need to input GitHub username and passward if you do not use SSH key introduced in Chapter GitHub . If no error, you can visit you blog by username.github.io. Modify and update pages The reason to create another folder instead using output to upload pages is that every time you use $ make html , output will be replaced with new files. Thus, it would be better to copy the files from output into gitblog before uploading. Here is some commands for delete and update files: $ git rm ×××.html $ git add . $ git commit -m \"some message\" $ git push -u origin master Summary This article is only the introduction of setting up a personal blog by using GitHub and Pelican . Since this is my first time to use it, some condition my not be covered. Please comment below if there is any error.","tags":"Coding","title":"Introduction to Pelican (1)"}]}